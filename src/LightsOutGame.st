'From Pharo13.1.0SNAPSHOT of 29 August 2025 [Build information: Pharo-13.1.0+SNAPSHOT.build.697.sha.af10a2ce70915e5076b7c9664f7851b9f7d95376 (64 Bit)] on 5 September 2025 at 5:06:13.882551 pm'!BorderedMorph subclass: #LightsOutGame	instanceVariableNames: 'cells cellsPerSide'	classVariableNames: ''	package: 'PBE-LightsOut'!!LightsOutGame methodsFor: 'initialization' stamp: '2025-09-05T14:18:57.624233+01:00'!initialize  "smalltalk kludge" super initialize. self resizeBoard: 10 . ! !!LightsOutGame methodsFor: 'initialization' stamp: '2025-09-04T21:28:33.149144+01:00'!cells ^ cells .! !!LightsOutGame methodsFor: 'initialization' stamp: '2025-09-05T14:18:57.620226+01:00'!cellsPerSide ^ cellsPerSide . ! !!LightsOutGame methodsFor: 'initialization' stamp: '2025-09-05T13:34:47.141505+01:00'!newCellAt: i at: j"Create a cell for position (i,j) and add it to my on-screenrepresentation at the appropriate screen position. Answer thenew cell"| c origin |c := LightsOutCell new.origin := self innerBounds origin.self addMorph: c.c position: ((i - 1) * c width) @ ((j - 1) * c height) + origin.c trigger: [ self toggleNeighboursOfCellAt: i at: j ].^ c .! !!LightsOutGame methodsFor: 'initialization' stamp: '2025-09-05T13:43:26.081015+01:00'!toggleNeighboursOfCellAt: i at: ji > 1 ifTrue: [ (cells at: i - 1 at: j) toggleState ].i < self cellsPerSide ifTrue: [ (cells at: i + 1 at: j) toggleState ].j > 1 ifTrue: [ (cells at: i at: j - 1) toggleState ].j < self cellsPerSide ifTrue: [ (cells at: i at: j + 1) toggleState ] .! !!LightsOutGame methodsFor: 'initialization' stamp: '2025-09-05T13:34:47.138433+01:00'!at: x at: y  ^ cells at: x at: y.! !!LightsOutGame methodsFor: 'initialization' stamp: '2025-09-05T13:48:27.358238+01:00'!reset "turn off all the switches "| w h |w := cells width.h := cells height.1 to: w do:[ :x | 	1 to: h do: [ :y | 		(cells at: x at: y) turnOff ]].! !!LightsOutGame methodsFor: 'initialization' stamp: '2025-09-05T14:23:45.679259+01:00'!resizeBoard: n  | sampleCell width height n |"if cellsperside is defined then there should be cells to delete"((self cellsPerSide) = nil) ifFalse: [  "delete cells exist already"1 to: (self cellsPerSide) do: [ :x | 	1 to: (self cellsPerSide) do: [ :y | 		(cells at: x at: y) delete  ] ]]. "set number of cells per side as n" cellsPerSide := n. "make a default cell and get its width height" sampleCell := LightsOutCell new. width := sampleCell width. height := sampleCell height. "compute size this container square needs to be " self bounds: (0 @ 0 extent: ((width * n) + 20) @ ((height * n) + (10 * self borderWidth) + 20)) .  self position: 100@100 .  "cells are actual morphs - grid of n x n morphs accessible through cells " cells :=  LightsOutMatrix new . cells resize: n by: n with: [ :y | [ :x | self newCellAt: x at: y ]].! !!LightsOutGame methodsFor: 'initialization' stamp: '2025-09-05T16:22:33.904686+01:00'!isSolved | w h |w := self cellsPerSide.h := w."initial state board - is everything is off . solved when everything is on . ""if cellsPerSide is defined then there should be cells to delete"1 to: w do: [ :x | 	1 to: h do: [ :y | 		| c | 		c := (cells at: x at: y).		"its off if not isOn , bit confusing"		c isOn ifFalse: [ ^ False ]]]."all squares in the grid are on - so we are solved"^ True.! !